; Ideally, we want something like
; (type E 
;   (enum (Var (name str))
;         (Lam (var str) (body E))
;         (App (func E) (arg E)))).
; But this is a recursive type so we would need to "box" the child Es.
(type E primitive)
(type str primitive)

;;;;;;; lambda expr
(decl extern var (str) E)
(constructor var "MakeVar")
(extractor var "GetVar")

(decl extern lam (str E) E)
(constructor lam "MakeLam")
(extractor lam "GetLam")

(decl extern app (E E) E)
(constructor app "MakeApp")
(extractor app "GetApp")
;;;;;;;

(decl extern identity (E) E)
(constructor identity "Identity")

;; (decl extern-scoped bind (str E E) effect)
(decl extern bind (str E E) E)
(constructor bind "Bind")

(decl extern unbind (str E) E)
(constructor unbind "Unbind")

(decl extern lookup (str) E)
(constructor lookup "Lookup")

;; eval
(decl eval (E) E)

(rule 3 (eval (var x)) (lookup x))

(rule 2 (eval (app (lam x e) (@ g (lam _ _))))
  (unbind x (eval (bind x g e))))
  ;; (scoped (bind x g) (eval e))

(rule 1 (eval (app (@ f (lam x e1)) e2))
  (eval (app f (eval e2))))

(rule 1 (eval (app f x))
  (eval (app (eval f) x)))

(rule 0 (eval e)
  (identity e))
