; Ideally, we want something like
; (type E 
;   (enum (Var (name str))
;         (Lam (var str) (body E))
;         (App (func E) (arg E)))).
; But this is a recursive type so we would need to "box" the child Es.
(type E primitive)
(type str primitive)

(decl extern lam (str E) E)
(constructor lam "MakeLam")
(extractor lam "GetLam")

(decl extern app (E E) E)
(constructor app "MakeApp")
(extractor app "GetApp")

(decl extern subst (str E E) E)
(constructor subst "Subst")

(decl extern identity (E) E)
(constructor identity "Identity")

(decl eval (E) E)

;; 2
(rule 2 (eval (app (lam x e) (@ g (lam _ _))))
  (eval (subst x g e)))

;; 1
(rule 1 (eval (app (@ f (lam x e1)) e2))
  (eval (app f (eval e2))))

;; 1
(rule 1 (eval (app f x))
  (eval (app (eval f) x)))

;; 0
(rule 0 (eval e)
  (identity e))
