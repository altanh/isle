(type int primitive)
(type void primitive)

(type Foo (enum A B C))
(type Bar (enum (X (x int)) (Y (y Foo))))
(type BinOp extern (enum Add Mul))

(decl add (int int) int)
(decl mul (int int) int)
(decl shl (int int) int)

(decl extern is_even () int)
(decl extern is_foobar () int)
(extractor is_even "IsEven")
(extractor is_foobar "IsFoobar")

(rule (add x x) (mul x 2))
(rule (mul x 2) (shl x 1))
(rule (shl x 1) (let ((y (add x 0)) (z (mul y 1))) (mul z 2)))

(rule (mul (and x (is_even) (is_foobar)) y) (mul (add x y) y))
(rule (mul x y)
    (if-let (is_foobar) (is_even x))
    (if-let _ (is_foobar y))
    (mul (add x y) y))
